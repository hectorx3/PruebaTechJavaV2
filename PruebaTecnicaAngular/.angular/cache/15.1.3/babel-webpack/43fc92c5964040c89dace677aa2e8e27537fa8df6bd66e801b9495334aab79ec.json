{"ast":null,"code":"import { map, tap, of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/escuela.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction UpdateCalifComponent_option_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const materia_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", materia_r1);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", materia_r1.nombre, \" \");\n  }\n}\nexport class UpdateCalifComponent {\n  constructor(route, escuelaService, router) {\n    this.route = route;\n    this.escuelaService = escuelaService;\n    this.router = router;\n    this.getAllMaterias$ = of();\n    this.calificacionId = 0;\n  }\n  ngOnInit() {\n    const routeParams = this.route.snapshot.paramMap;\n    const calificacionIdFromRoute = Number(routeParams.get('calificacionId'));\n    this.calificacionId = calificacionIdFromRoute;\n    this.getAllMaterias$ = this.escuelaService.getAllMaterias().pipe(map(d => d.data), tap(console.log));\n  }\n  save() {\n    const califToNumber = parseFloat(this.calificacionText);\n    if (califToNumber < 1 || califToNumber > 10) {\n      alert(\"Minimo 1 y maximo 10\");\n      return;\n    }\n    this.escuelaService.updateCalificacion(this.calificacionId, califToNumber).subscribe(d => {\n      console.log(d, 'respuesta del registro de calificaciones');\n      if (d.statusCode && d.statusCode != 'error') {\n        this.router.navigate(['/kardex/' + this.calificacionId]);\n      }\n    });\n  }\n}\nUpdateCalifComponent.ɵfac = function UpdateCalifComponent_Factory(t) {\n  return new (t || UpdateCalifComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.EscuelaService), i0.ɵɵdirectiveInject(i1.Router));\n};\nUpdateCalifComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UpdateCalifComponent,\n  selectors: [[\"app-update-calif\"]],\n  decls: 14,\n  vars: 5,\n  consts: [[3, \"ngModel\", \"ngModelChange\"], [3, \"ngValue\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"number\", \"min\", \"1\", \"max\", \"10\", 3, \"ngModel\", \"ngModelChange\"], [2, \"margin-left\", \"10px\", 3, \"click\"], [3, \"ngValue\"]],\n  template: function UpdateCalifComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"Registrar Calificacion\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"div\")(3, \"label\");\n      i0.ɵɵtext(4, \"Materia*\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"select\", 0);\n      i0.ɵɵlistener(\"ngModelChange\", function UpdateCalifComponent_Template_select_ngModelChange_5_listener($event) {\n        return ctx.selectedObject = $event;\n      });\n      i0.ɵɵtemplate(6, UpdateCalifComponent_option_6_Template, 2, 2, \"option\", 1);\n      i0.ɵɵpipe(7, \"async\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(8, \"div\")(9, \"label\");\n      i0.ɵɵtext(10, \"Calificacion*\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"input\", 2);\n      i0.ɵɵlistener(\"ngModelChange\", function UpdateCalifComponent_Template_input_ngModelChange_11_listener($event) {\n        return ctx.calificacionText = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(12, \"button\", 3);\n      i0.ɵɵlistener(\"click\", function UpdateCalifComponent_Template_button_click_12_listener() {\n        return ctx.save();\n      });\n      i0.ɵɵtext(13, \"Guardar\");\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngModel\", ctx.selectedObject);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(7, 3, ctx.getAllMaterias$));\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngModel\", ctx.calificacionText);\n    }\n  },\n  dependencies: [i3.NgForOf, i4.NgSelectOption, i4.ɵNgSelectMultipleOption, i4.DefaultValueAccessor, i4.NumberValueAccessor, i4.SelectControlValueAccessor, i4.NgControlStatus, i4.MinValidator, i4.MaxValidator, i4.NgModel, i3.AsyncPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAEA,SAASA,GAAG,EAAEC,GAAG,EAAEC,EAAE,QAAoB,MAAM;;;;;;;;ICGvCC,iCAA4E;IACvEA,YACJ;IAAAA,iBAAS;;;;IAF8CA,oCAAmB;IACtEA,eACJ;IADIA,kDACJ;;;ADGT,OAAM,MAAOC,oBAAoB;EAO/BC,YACUC,KAAqB,EACrBC,cAA8B,EAC9BC,MAAc;IAFd,UAAK,GAALF,KAAK;IACL,mBAAc,GAAdC,cAAc;IACd,WAAM,GAANC,MAAM;IARhB,oBAAe,GAAoBN,EAAE,EAAE;IAGvC,mBAAc,GAAW,CAAC;EAMtB;EAEJO,QAAQ;IACN,MAAMC,WAAW,GAAG,IAAI,CAACJ,KAAK,CAACK,QAAQ,CAACC,QAAQ;IAChD,MAAMC,uBAAuB,GAAGC,MAAM,CAACJ,WAAW,CAACK,GAAG,CAAC,gBAAgB,CAAC,CAAC;IACzE,IAAI,CAACC,cAAc,GAAGH,uBAAuB;IAE7C,IAAI,CAACI,eAAe,GAAG,IAAI,CAACV,cAAc,CACvCW,cAAc,EAAE,CAChBC,IAAI,CACHnB,GAAG,CAACoB,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,EAChBpB,GAAG,CAACqB,OAAO,CAACC,GAAG,CAAC,CACjB;EACL;EAEAC,IAAI;IAEF,MAAMC,aAAa,GAAGC,UAAU,CAAC,IAAI,CAACC,gBAAgB,CAAC;IACvD,IAAGF,aAAa,GAAG,CAAC,IAAIA,aAAa,GAAG,EAAE,EAAC;MACzCG,KAAK,CAAC,sBAAsB,CAAC;MAC7B;;IAGF,IAAI,CAACrB,cAAc,CAACsB,kBAAkB,CAAC,IAAI,CAACb,cAAc,EAAES,aAAa,CAAC,CACzEK,SAAS,CAACV,CAAC,IAAG;MACbE,OAAO,CAACC,GAAG,CAACH,CAAC,EAAE,0CAA0C,CAAC;MAC1D,IAAGA,CAAC,CAACW,UAAU,IAAIX,CAAC,CAACW,UAAU,IAAI,OAAO,EAAC;QACzC,IAAI,CAACvB,MAAM,CAACwB,QAAQ,CAAC,CAAC,UAAU,GAAC,IAAI,CAAChB,cAAc,CAAC,CAAC;;IAE1D,CAAC,CAAC;EACJ;;AAzCWZ,oBAAoB;mBAApBA,oBAAoB;AAAA;AAApBA,oBAAoB;QAApBA,oBAAoB;EAAA6B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCVjClC,yBAAG;MAAAA,sCAAsB;MAAAA,iBAAI;MAE7BA,2BAAK;MACOA,wBAAQ;MAAAA,iBAAQ;MACxBA,iCAAqC;MAA7BA;QAAA;MAAA,EAA4B;MAChCA,2EAEU;;MACdA,iBAAS;MAGbA,2BAAK;MACOA,8BAAa;MAAAA,iBAAQ;MAC7BA,iCAAqE;MAA/BA;QAAA;MAAA,EAA8B;MAApEA,iBAAqE;MAGzEA,kCAAoD;MAAjBA;QAAA,OAASmC,UAAM;MAAA,EAAC;MAACnC,wBAAO;MAAAA,iBAAS;;;MAZxDA,eAA4B;MAA5BA,4CAA4B;MACJA,eAA0B;MAA1BA,mEAA0B;MAQpBA,eAA8B;MAA9BA,8CAA8B","names":["map","tap","of","i0","UpdateCalifComponent","constructor","route","escuelaService","router","ngOnInit","routeParams","snapshot","paramMap","calificacionIdFromRoute","Number","get","calificacionId","getAllMaterias$","getAllMaterias","pipe","d","data","console","log","save","califToNumber","parseFloat","calificacionText","alert","updateCalificacion","subscribe","statusCode","navigate","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/home/hector/proyectos/Micronaut/PruebaTecnicaAngular/src/app/update-calif/update-calif.component.ts","/home/hector/proyectos/Micronaut/PruebaTecnicaAngular/src/app/update-calif/update-calif.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { map, tap, of, Observable } from 'rxjs';\nimport { EscuelaService } from '../services/escuela.service';\n\n@Component({\n  selector: 'app-update-calif',\n  templateUrl: './update-calif.component.html',\n  styleUrls: ['./update-calif.component.css']\n})\nexport class UpdateCalifComponent implements OnInit {\n\n  getAllMaterias$: Observable<any> = of();\n\n  calificacionText:any;\n  calificacionId: number = 0;\n\n  constructor(\n    private route: ActivatedRoute,\n    private escuelaService: EscuelaService,\n    private router: Router\n  ) { }\n\n  ngOnInit(): void {\n    const routeParams = this.route.snapshot.paramMap;\n    const calificacionIdFromRoute = Number(routeParams.get('calificacionId'));\n    this.calificacionId = calificacionIdFromRoute\n\n    this.getAllMaterias$ = this.escuelaService\n      .getAllMaterias()\n      .pipe(\n        map(d => d.data),\n        tap(console.log),\n      )\n  }\n\n  save(){\n    \n    const califToNumber = parseFloat(this.calificacionText)\n    if(califToNumber < 1 || califToNumber > 10){\n      alert(\"Minimo 1 y maximo 10\")\n      return;\n    }\n\n    this.escuelaService.updateCalificacion(this.calificacionId, califToNumber)\n    .subscribe(d => {\n      console.log(d, 'respuesta del registro de calificaciones')\n      if(d.statusCode && d.statusCode != 'error'){\n        this.router.navigate(['/kardex/'+this.calificacionId])\n      }\n    });\n  }\n\n\n}\n","<p>Registrar Calificacion</p>\n\n<div>\n    <label >Materia*</label>\n    <select [(ngModel)]=\"selectedObject\">\n        <option *ngFor=\"let materia of getAllMaterias$ | async\" [ngValue]=\"materia\">\n             {{materia.nombre}}\n         </option>\n    </select>\n</div>\n\n<div>\n    <label >Calificacion*</label>\n    <input type=\"number\" min=\"1\" max=\"10\" [(ngModel)]=\"calificacionText\">\n</div>\n\n<button style=\"margin-left: 10px;\" (click)=\"save()\">Guardar</button>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}