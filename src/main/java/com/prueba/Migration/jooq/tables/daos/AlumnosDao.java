/*
 * This file is generated by jOOQ.
 */
package jooq.tables.daos;


import java.util.List;
import java.util.Optional;

import jooq.tables.Alumnos;
import jooq.tables.records.AlumnosRecord;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AlumnosDao extends DAOImpl<AlumnosRecord, jooq.tables.pojos.Alumnos, Integer> {

    /**
     * Create a new AlumnosDao without any configuration
     */
    public AlumnosDao() {
        super(Alumnos.ALUMNOS, jooq.tables.pojos.Alumnos.class);
    }

    /**
     * Create a new AlumnosDao with an attached configuration
     */
    public AlumnosDao(Configuration configuration) {
        super(Alumnos.ALUMNOS, jooq.tables.pojos.Alumnos.class, configuration);
    }

    @Override
    public Integer getId(jooq.tables.pojos.Alumnos object) {
        return object.getIdAlumno();
    }

    /**
     * Fetch records that have <code>id_alumno BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.tables.pojos.Alumnos> fetchRangeOfIdAlumno(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Alumnos.ALUMNOS.ID_ALUMNO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id_alumno IN (values)</code>
     */
    public List<jooq.tables.pojos.Alumnos> fetchByIdAlumno(Integer... values) {
        return fetch(Alumnos.ALUMNOS.ID_ALUMNO, values);
    }

    /**
     * Fetch a unique record that has <code>id_alumno = value</code>
     */
    public jooq.tables.pojos.Alumnos fetchOneByIdAlumno(Integer value) {
        return fetchOne(Alumnos.ALUMNOS.ID_ALUMNO, value);
    }

    /**
     * Fetch a unique record that has <code>id_alumno = value</code>
     */
    public Optional<jooq.tables.pojos.Alumnos> fetchOptionalByIdAlumno(Integer value) {
        return fetchOptional(Alumnos.ALUMNOS.ID_ALUMNO, value);
    }

    /**
     * Fetch records that have <code>nombre BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.tables.pojos.Alumnos> fetchRangeOfNombre(String lowerInclusive, String upperInclusive) {
        return fetchRange(Alumnos.ALUMNOS.NOMBRE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>nombre IN (values)</code>
     */
    public List<jooq.tables.pojos.Alumnos> fetchByNombre(String... values) {
        return fetch(Alumnos.ALUMNOS.NOMBRE, values);
    }

    /**
     * Fetch records that have <code>ap_paterno BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.tables.pojos.Alumnos> fetchRangeOfApPaterno(String lowerInclusive, String upperInclusive) {
        return fetchRange(Alumnos.ALUMNOS.AP_PATERNO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ap_paterno IN (values)</code>
     */
    public List<jooq.tables.pojos.Alumnos> fetchByApPaterno(String... values) {
        return fetch(Alumnos.ALUMNOS.AP_PATERNO, values);
    }

    /**
     * Fetch records that have <code>ap_materno BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.tables.pojos.Alumnos> fetchRangeOfApMaterno(String lowerInclusive, String upperInclusive) {
        return fetchRange(Alumnos.ALUMNOS.AP_MATERNO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>ap_materno IN (values)</code>
     */
    public List<jooq.tables.pojos.Alumnos> fetchByApMaterno(String... values) {
        return fetch(Alumnos.ALUMNOS.AP_MATERNO, values);
    }

    /**
     * Fetch records that have <code>activo BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.tables.pojos.Alumnos> fetchRangeOfActivo(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Alumnos.ALUMNOS.ACTIVO, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>activo IN (values)</code>
     */
    public List<jooq.tables.pojos.Alumnos> fetchByActivo(Boolean... values) {
        return fetch(Alumnos.ALUMNOS.ACTIVO, values);
    }
}
