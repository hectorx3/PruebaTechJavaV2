/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import jooq.Keys;
import jooq.Public;
import jooq.tables.records.CalificacionesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Calificaciones extends TableImpl<CalificacionesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.calificaciones</code>
     */
    public static final Calificaciones CALIFICACIONES = new Calificaciones();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CalificacionesRecord> getRecordType() {
        return CalificacionesRecord.class;
    }

    /**
     * The column <code>public.calificaciones.id_calificacion</code>.
     */
    public final TableField<CalificacionesRecord, Integer> ID_CALIFICACION = createField(DSL.name("id_calificacion"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.calificaciones.id_materia</code>.
     */
    public final TableField<CalificacionesRecord, Integer> ID_MATERIA = createField(DSL.name("id_materia"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.calificaciones.id_alumno</code>.
     */
    public final TableField<CalificacionesRecord, Integer> ID_ALUMNO = createField(DSL.name("id_alumno"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.calificaciones.activo</code>.
     */
    public final TableField<CalificacionesRecord, Boolean> ACTIVO = createField(DSL.name("activo"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.calificaciones.fecha_registro</code>.
     */
    public final TableField<CalificacionesRecord, LocalDateTime> FECHA_REGISTRO = createField(DSL.name("fecha_registro"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.calificaciones.calificacion</code>.
     */
    public final TableField<CalificacionesRecord, BigDecimal> CALIFICACION = createField(DSL.name("calificacion"), SQLDataType.NUMERIC(10, 2), this, "");

    private Calificaciones(Name alias, Table<CalificacionesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Calificaciones(Name alias, Table<CalificacionesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.calificaciones</code> table reference
     */
    public Calificaciones(String alias) {
        this(DSL.name(alias), CALIFICACIONES);
    }

    /**
     * Create an aliased <code>public.calificaciones</code> table reference
     */
    public Calificaciones(Name alias) {
        this(alias, CALIFICACIONES);
    }

    /**
     * Create a <code>public.calificaciones</code> table reference
     */
    public Calificaciones() {
        this(DSL.name("calificaciones"), null);
    }

    public <O extends Record> Calificaciones(Table<O> child, ForeignKey<O, CalificacionesRecord> key) {
        super(child, key, CALIFICACIONES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<CalificacionesRecord, Integer> getIdentity() {
        return (Identity<CalificacionesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<CalificacionesRecord> getPrimaryKey() {
        return Keys.CALIFICACIONES_PKEY;
    }

    @Override
    public List<ForeignKey<CalificacionesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CALIFICACIONES__CALIFICACIONES_ID_MATERIA_FKEY, Keys.CALIFICACIONES__CALIFICACIONES_ID_ALUMNO_FKEY);
    }

    private transient Materias _materias;
    private transient Alumnos _alumnos;

    /**
     * Get the implicit join path to the <code>public.materias</code> table.
     */
    public Materias materias() {
        if (_materias == null)
            _materias = new Materias(this, Keys.CALIFICACIONES__CALIFICACIONES_ID_MATERIA_FKEY);

        return _materias;
    }

    /**
     * Get the implicit join path to the <code>public.alumnos</code> table.
     */
    public Alumnos alumnos() {
        if (_alumnos == null)
            _alumnos = new Alumnos(this, Keys.CALIFICACIONES__CALIFICACIONES_ID_ALUMNO_FKEY);

        return _alumnos;
    }

    @Override
    public Calificaciones as(String alias) {
        return new Calificaciones(DSL.name(alias), this);
    }

    @Override
    public Calificaciones as(Name alias) {
        return new Calificaciones(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Calificaciones rename(String name) {
        return new Calificaciones(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Calificaciones rename(Name name) {
        return new Calificaciones(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, Integer, Boolean, LocalDateTime, BigDecimal> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
